// components/GenerateReportModal.jsx

import React, { useState } from 'react';
import { X, Loader2, Save } from 'lucide-react';
import { apiService } from '../../services/financialApiServices.jsx';

const GenerateReportModal = ({ isOpen, onClose, onError }) => {
  const [reportSettings, setReportSettings] = useState({
    startDate: '',
    endDate: '',
    type: 'detailed',
    includeCharts: true
  });
  const [generating, setGenerating] = useState(false);

  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value || 0);
  };

  const handleGenerateReport = async (e) => {
    e.preventDefault();
    
    if (!reportSettings.startDate || !reportSettings.endDate) {
      onError('Please select both start and end dates for the report.');
      return;
    }
    
    const startDate = new Date(reportSettings.startDate);
    const endDate = new Date(reportSettings.endDate);
    
    if (startDate > endDate) {
      onError('Start date must be before end date.');
      return;
    }
    
    setGenerating(true);
    
    try {
      const reportData = await apiService.generateReport(reportSettings);
      
      // Create a detailed report file
      const reportContent = `
FINANCIAL REPORT
================
Report ID: ${reportData.report.reportId}
Generated: ${new Date(reportData.report.generatedAt).toLocaleString()}
Generated By: ${reportData.report.generatedBy || 'System'}
Period: ${reportSettings.startDate} to ${reportSettings.endDate}
Type: ${reportSettings.type}
Include Charts: ${reportSettings.includeCharts ? 'Yes' : 'No'}

EXECUTIVE SUMMARY
-----------------
Total Revenue: ${formatCurrency(reportData.report.summary.totalRevenue)}
Total Expenses: ${formatCurrency(reportData.report.summary.totalExpenses)}
Net Income: ${formatCurrency(reportData.report.summary.netIncome)}
Profit Margin: ${reportData.report.summary.totalRevenue > 0 ? 
  ((reportData.report.summary.netIncome / reportData.report.summary.totalRevenue) * 100).toFixed(2) : 0}%

PAYMENT DETAILS
---------------
Total Payments Received: ${reportData.report.summary.paymentCount}
Average Payment Amount: ${formatCurrency(reportData.report.summary.avgPayment)}

EXPENSE DETAILS
---------------
Total Expense Items: ${reportData.report.summary.expenseCount}
Average Expense Amount: ${formatCurrency(reportData.report.summary.avgExpense)}

PROPERTY PERFORMANCE
--------------------
${reportData.report.propertyPerformance.map(prop => `
Property: ${prop.propertyName}
  - Units: ${prop.occupiedUnits}/${prop.totalUnits} (${prop.occupancyRate}% occupied)
  - Revenue: ${formatCurrency(prop.revenue)}
  - Performance Rating: ${prop.occupancyRate >= 90 ? 'Excellent' : 
                         prop.occupancyRate >= 70 ? 'Good' : 'Needs Attention'}
`).join('')}

RECOMMENDATIONS
---------------
${reportData.report.summary.netIncome > 0 ? 
  '✓ Positive cash flow indicates healthy financial performance.' : 
  '⚠ Negative cash flow requires immediate attention.'}

${reportData.report.propertyPerformance.some(p => p.occupancyRate < 70) ? 
  '• Consider marketing strategies for underperforming properties.' : 
  '✓ All properties maintaining good occupancy rates.'}

${reportData.report.summary.totalExpenses > reportData.report.summary.totalRevenue * 0.7 ? 
  '• Review expense categories for potential cost reduction opportunities.' : 
  '✓ Expense ratios are within acceptable ranges.'}

---
Generated by Rental Management System
Report ID: ${reportData.report.reportId}
        `;
        
      // Download the report
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `financial-report-${reportData.report.reportId}.txt`;
      link.click();
      window.URL.revokeObjectURL(url);
      
      // Reset form and close modal
      setReportSettings({
        startDate: '',
        endDate: '',
        type: 'detailed',
        includeCharts: true
      });
      onClose();
      
    } catch (error) {
      console.error('Report generation failed:', error);
      onError('Failed to generate report. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  const handleClose = () => {
    if (!generating) {
      setReportSettings({
        startDate: '',
        endDate: '',
        type: 'detailed',
        includeCharts: true
      });
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="relative bg-white rounded-lg shadow-xl w-96 max-w-[90vw]">
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-xl font-bold">Generate Financial Report</h2>
          <button 
            onClick={handleClose}
            disabled={generating}
            className="hover:bg-gray-100 p-1 rounded transition-colors disabled:opacity-50"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleGenerateReport} className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Date Range *</label>
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="block text-xs text-gray-500 mb-1">Start Date</label>
                <input
                  type="date"
                  className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  value={reportSettings.startDate}
                  onChange={(e) => setReportSettings({
                    ...reportSettings,
                    startDate: e.target.value
                  })}
                  required
                  disabled={generating}
                />
              </div>
              <div>
                <label className="block text-xs text-gray-500 mb-1">End Date</label>
                <input
                  type="date"
                  className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  value={reportSettings.endDate}
                  onChange={(e) => setReportSettings({
                    ...reportSettings,
                    endDate: e.target.value
                  })}
                  required
                  disabled={generating}
                />
              </div>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Report Type *</label>
            <select 
              className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={reportSettings.type}
              onChange={(e) => setReportSettings({
                ...reportSettings,
                type: e.target.value
              })}
              disabled={generating}
            >
              <option value="summary">Summary Report</option>
              <option value="detailed">Detailed Analysis</option>
              <option value="tax">Tax Preparation Report</option>
            </select>
            <p className="text-xs text-gray-500 mt-1">
              {reportSettings.type === 'summary' && 'High-level overview with key metrics'}
              {reportSettings.type === 'detailed' && 'Comprehensive analysis with recommendations'}
              {reportSettings.type === 'tax' && 'Formatted for tax preparation purposes'}
            </p>
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="includeCharts"
              checked={reportSettings.includeCharts}
              onChange={(e) => setReportSettings({
                ...reportSettings,
                includeCharts: e.target.checked
              })}
              disabled={generating}
              className="rounded"
            />
            <label htmlFor="includeCharts" className="text-sm">
              Include Charts & Visual Data
            </label>
          </div>

          {/* Report Preview */}
          {reportSettings.startDate && reportSettings.endDate && (
            <div className="bg-gray-50 p-3 rounded-lg">
              <h4 className="text-sm font-medium mb-2">Report Preview</h4>
              <div className="text-xs text-gray-600 space-y-1">
                <p><strong>Period:</strong> {new Date(reportSettings.startDate).toLocaleDateString()} - {new Date(reportSettings.endDate).toLocaleDateString()}</p>
                <p><strong>Type:</strong> {reportSettings.type.charAt(0).toUpperCase() + reportSettings.type.slice(1)} Report</p>
                <p><strong>Format:</strong> Text file (.txt)</p>
                <p><strong>Includes:</strong> Financial summary, property performance, recommendations</p>
              </div>
            </div>
          )}

          <div className="flex justify-end space-x-2 pt-4 border-t">
            <button
              type="button"
              onClick={handleClose}
              className="px-4 py-2 border rounded hover:bg-gray-50 transition-colors disabled:opacity-50"
              disabled={generating}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded flex items-center hover:bg-blue-600 transition-colors disabled:opacity-50"
              disabled={generating}
            >
              {generating && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
              <Save className="w-4 h-4 mr-2" />
              {generating ? 'Generating...' : 'Generate Report'}
            </button>
          </div>
        </form>

        {/* Loading Overlay */}
        {generating && (
          <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center rounded-lg">
            <div className="text-center">
              <Loader2 className="w-8 h-8 animate-spin mx-auto mb-2 text-blue-500" />
              <p className="text-sm text-gray-600">Generating your report...</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default GenerateReportModal;